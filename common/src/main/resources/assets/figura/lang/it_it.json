{
    "figura": "Figura",
    "figura.tab": "  ",
    "figura.ellipsis": "…",
    "figura.backend.connected": "Backend Connessa!",
    "figura.backend.disconnected": "Backend Disconessa!",
    "figura.backend.ping_rate": "Rateo Ping",
    "figura.backend.ping_size": "Dimensione ping",
    "figura.backend.upload_success": "Avatar Caricato!",
    "figura.backend.upload_error": "Errore di Caricamento",
    "figura.backend.upload_too_big": "L'avatar è troppo pesante",
    "figura.backend.upload_too_many": "hai troppi Avatar",
    "figura.backend.delete_success": "Avatar Cancellato!",
    "figura.backend.delete_error": "Errore nel cancellamento",
    "figura.toast.reload": "Avatar Ricaricato!",
    "figura.toast.reload_all": "Ricaricati TUTTI gli Avatars!",
    "figura.toast.panic_enabled": "Modalità Panico attivata!",
    "figura.toast.panic_disabled": "Modalità Panico disattivata!",
    "figura.toast.clipboard": "Copiato!",
    "figura.toast.load_error": "Caricamento dell'avatar fallito!",
    "figura.toast.new_version": "New version available!",
    "figura.popup_menu.cancel": "Cancella",
    "figura.popup_menu.reload": "Ricarica Avatar",
    "figura.badges.pride.agender": "Simbolo agender!",
    "figura.badges.pride.aroace": "Simbolo Aroace!",
    "figura.badges.pride.aromantic": "Simbolo Aromantico!",
    "figura.badges.pride.asexual": "Simbolo Asessuale!",
    "figura.badges.pride.bigender": "Simbolo Bigender!",
    "figura.badges.pride.bisexual": "Simbolo Bisesuale!",
    "figura.badges.pride.demiboy": "Simbolo Demiboy!",
    "figura.badges.pride.demigender": "Simbolo Demigender!",
    "figura.badges.pride.demigirl": "Simbolo Demigirl!",
    "figura.badges.pride.demiromantic": "Simbolo Demiromantico!",
    "figura.badges.pride.demisexual": "Simbolo Demisesuale!",
    "figura.badges.pride.disability": "Simbolo Disabilità!",
    "figura.badges.pride.finsexual": "Simbolo Finsessuale!",
    "figura.badges.pride.gaymen": "Simbolo Uomini Gay!",
    "figura.badges.pride.genderfae": "Simbolo Genderfae!",
    "figura.badges.pride.genderfluid": "Simbolo Genderfluid!",
    "figura.badges.pride.genderqueer": "Simbolo Genderqueer!",
    "figura.badges.pride.intersex": "Simbolo Intersesso!",
    "figura.badges.pride.lesbian": "Simbolo Lesbico!",
    "figura.badges.pride.nonbinary": "Simbolo Nonbinario!",
    "figura.badges.pride.pansexual": "Simbolo Pansexual!",
    "figura.badges.pride.plural": "Simbolo Plural!",
    "figura.badges.pride.polysexual": "Simbolo Polysessuale!",
    "figura.badges.pride.pride": "Simbolo Pride!",
    "figura.badges.pride.transgender": "Simbolo Transgender!",
    "figura.badges.special.translator": "Traduttore!",
    "figura.badges.special.donator": "Grazie per supportare la mod Figura!",
    "figura.badges.special.contest": "GG!",
    "figura.badges.special.discord_staff": "Staff del Server ufficiale di Figura!",
    "figura.badges.special.dev": "Creatore di Figura!",
    "figura.gui.on": "ON",
    "figura.gui.off": "OFF",
    "figura.gui.name": "Nome",
    "figura.gui.authors": "Autori",
    "figura.gui.size": "Dimensione",
    "figura.gui.complexity": "Complessità",
    "figura.gui.done": "Finito",
    "figura.gui.cancel": "Cancella",
    "figura.gui.expand": "Espandi",
    "figura.gui.minimise": "Riduci",
    "figura.gui.reset_all": "Resetta tutti",
    "figura.gui.error.no_avatar": "Nessun Avatar Selezionato!",
    "figura.gui.error.no_keybinds": "L'avatar non ha tasti!",
    "figura.gui.error.no_sounds": "Avatar non ha suoni Personallizati!",
    "figura.gui.error.no_wheel_page": "La Ruota delle Azioni non ha pagine attive!",
    "figura.gui.context.reload": "Ricarica Avatar",
    "figura.gui.context.copy_name": "Copia Nome",
    "figura.gui.context.copy_uuid": "Copia UUID",
    "figura.gui.context.copy_path": "Copia Percorso",
    "figura.gui.context.open_folder": "Apri Cartella",
    "figura.gui.panels.title.profile": "Profilo",
    "figura.gui.panels.title.browser": "Browser",
    "figura.gui.panels.title.wardrobe": "Guardaroba",
    "figura.gui.panels.title.settings": "Impostazioni",
    "figura.gui.panels.title.sound": "Suoni dell'Avatar",
    "figura.gui.panels.title.keybind": "Tasti dell'Avatar",
    "figura.gui.panels.title.avatar": "Preview dell'Avatar",
    "figura.gui.wardrobe.expand_wardrobe.tooltip": "Espandi lista del Guardaroba",
    "figura.gui.wardrobe.minimize_wardrobe.tooltip": "Riduci Lista del Guardaroba",
    "figura.gui.wardrobe.upload.tooltip": "Carica Avatar sul Server di Figura",
    "figura.gui.wardrobe.reload.tooltip": "Ricarica Avatar",
    "figura.gui.wardrobe.delete.tooltip": "Cancella Avatar dal Server di Figura",
    "figura.gui.wardrobe.sound.tooltip": "Suoni dell'Avatar",
    "figura.gui.wardrobe.keybind.tooltip": "Tasti dell'Avatar",
    "figura.gui.wardrobe.folder.tooltip": "Apri Cartella Root degli Avatar",
    "figura.gui.sound.play": "Riproduci Suono",
    "figura.gui.sound.stop": "Ferma Suono",
    "figura.gui.status.size": "Dimensione",
    "figura.gui.status.size.0": "Niente",
    "figura.gui.status.size.1": "Dimensione dell'Avatar è più grande di %s",
    "figura.gui.status.size.2": "Dimensione dell'Avatar è più grandi di %s",
    "figura.gui.status.size.3": "ok",
    "figura.gui.status.texture": "Texture",
    "figura.gui.status.texture.0": "Niente",
    "figura.gui.status.texture.3": "ok",
    "figura.gui.status.script": "Script",
    "figura.gui.status.script.0": "Niente",
    "figura.gui.status.script.1": "Lo script di questo Avatar contiene un errore",
    "figura.gui.status.script.2": "Lo script di questo Avatar è fatto per una versione più nuova di Figura",
    "figura.gui.status.script.3": "ok",
    "figura.gui.status.backend": "Backend",
    "figura.gui.status.backend.1": "Disconessa",
    "figura.gui.status.backend.2": "Connessione in corso",
    "figura.gui.status.backend.3": "Conessa",
    "figura.config.nameplate": "Nameplate",
    "figura.config.nameplate.tooltip": "Impostazioni Nameplate",
    "figura.config.self_nameplate": "Attiva Nameplate per te stess*",
    "figura.config.self_nameplate.tooltip": "Alterna il Rendering della tua nameplate ",
    "figura.config.preview_nameplate": "Nameplate nella GUI",
    "figura.config.preview_nameplate.tooltip": "Alterna il Rendering delle nameplates nella GUi",
    "figura.config.chat_nameplate": "Chat Personallizzazione chat",
    "figura.config.chat_nameplate.tooltip": "Imposta il Livello della Personalizzazione della nameplate nella CHAT",
    "figura.config.entity_nameplate": "Personalizzazione Entità",
    "figura.config.entity_nameplate.tooltip": "Imposta il Livello della Personalizzazione della nameplate Dell'ENTITÀ",
    "figura.config.list_nameplate": "Personalizzazione Tablist",
    "figura.config.list_nameplate.tooltip": "Imposta il Livello della Personalizzazione della nameplate della TABLIST",
    "figura.config.nameplate_level.1": "Niente",
    "figura.config.nameplate_level.2": "Script",
    "figura.config.nameplate_level.3": "Script + Distintivi",
    "figura.config.script": "Script",
    "figura.config.script.tooltip": "Impostazioni Script",
    "figura.config.log_location": "Print Output",
    "figura.config.log_location.tooltip": "posto di output delle funzioni print dello script",
    "figura.config.log_location.1": "Chat",
    "figura.config.log_location.2": "Logger",
    "figura.config.allow_fp_hands": "Mani in prima persona",
    "figura.config.allow_fp_hands.tooltip": "Alterna se gli script possono spostare, ruotare o modificare la dimensione delle Mani in Prima Persona",
    "figura.config.log_number_length": "Stampa a schermo lunghezza del numero",
    "figura.config.log_number_length.tooltip": "Cambia quanti decimali verrano stampati a schermo dentro funzioni print",
    "figura.config.action_wheel_button": "Tasto Ruota delle Azioni",
    "figura.config.action_wheel_button.tooltip": "Tasto per Aprire la Ruota delle azioni",
    "figura.config.action_wheel_scale": "Dimensione Ruota delle Azioni",
    "figura.config.action_wheel_scale.tooltip": "Cambia la dimensione della Ruota delle Azioni",
    "figura.config.action_wheel_title": "Selezionato Testo dell'Azione",
    "figura.config.action_wheel_title.tooltip": "Cambia dove il testo dell'azione selezionato è messo",
    "figura.config.action_wheel_title.1": "Mouse (Tooltip)",
    "figura.config.action_wheel_title.2": "Mouse",
    "figura.config.action_wheel_title.3": "Sopra",
    "figura.config.action_wheel_title.4": "In mezzo",
    "figura.config.action_wheel_title.5": "Sotto",
    "figura.config.action_wheel_decorations": "Decorazioni con Oggetti",
    "figura.config.action_wheel_decorations.tooltip": "Alterna il rendering delle decorazioni con oggetti, come la durabilità e la quantità",
    "figura.config.ui": "Impostazioni dell'UI",
    "figura.config.ui.tooltip": "Impostazioni dell'UI",
    "figura.config.background_scroll_speed": "Velocità dello scroll del background",
    "figura.config.background_scroll_speed.tooltip": "Moltiplicatore della velocità dello scroll dello sfondo animato.",
    "figura.config.popup_scale": "Dimensione Popup giocatore",
    "figura.config.popup_scale.tooltip": "Moltiplicatore dimensioni del popup del giocatore",
    "figura.config.popup_min_size": "Dimensione minima del Popup del giocatore",
    "figura.config.popup_min_size.tooltip": "Dimensione minima del popup del giocatore man mano che ti allontani dalla persona",
    "figura.config.popup_max_size": "Dimensione massima del Popup del giocatore",
    "figura.config.popup_max_size.tooltip": "Dimensione massima del popup del giocaroe man mano che ti avvicini alla persona",
    "figura.config.paperdoll": "Paperdoll",
    "figura.config.paperdoll.tooltip": "Impostazioni Paperdoll",
    "figura.config.has_paperdoll": "Attiva paperdoll",
    "figura.config.has_paperdoll.tooltip": "Alterna il rendering della paperdoll",
    "figura.config.paperdoll_always_on": "Sempre attiva",
    "figura.config.paperdoll_always_on.tooltip": "Alterna se la paperdoll dovrebbe renderizzarsi sempre o solo durante le pose",
    "figura.config.first_person_paperdoll": "Solo Prima Persona",
    "figura.config.first_person_paperdoll.tooltip": "Alterna se la paperdoll dovrebbe renderizzarsi solo in prima persona",
    "figura.config.paperdoll_scale": "Dimensione Paperdoll",
    "figura.config.paperdoll_scale.tooltip": "Cambia la dimensione della paperdoll",
    "figura.config.paperdoll_x": "Paperdoll X",
    "figura.config.paperdoll_x.tooltip": "Cambia la posizione X della paperdoll",
    "figura.config.paperdoll_y": "Paperdoll Y",
    "figura.config.paperdoll_y.tooltip": "Cambia la posizione Y della paperdoll",
    "figura.config.paperdoll_pitch": "Inclinazione(PITCH) della Paperdoll",
    "figura.config.paperdoll_pitch.tooltip": "Cambia l'inclinazione(PITCH) della paperdoll",
    "figura.config.paperdoll_yaw": "Imbardata(Yaw) della Paperdoll",
    "figura.config.paperdoll_yaw.tooltip": "Cambia l'imbardata(YAW) della paperdoll",
    "figura.config.misc": "Varie",
    "figura.config.misc.tooltip": "Impostazioni non organizzate/non correlate",
    "figura.config.popup_button": "Menù Popup",
    "figura.config.popup_button.tooltip": "Tasto per aprire il meno popup per le azioni veloci per l'utente selezionato",
    "figura.config.reload_button": "Ricarica Avatar",
    "figura.config.reload_button.tooltip": "Ricarica l'avatar in uso quando premuto",
    "figura.config.panic_button": "Bottone Panico",
    "figura.config.panic_button.tooltip": "Ferma il rendering di ogni avatar",
    "figura.config.button_location": "Tasto Posizione Menù",
    "figura.config.button_location.tooltip": "Posizione del tasto Figura",
    "figura.config.button_location.1": "Icona",
    "figura.config.button_location.2": "In alto a sinistra",
    "figura.config.button_location.3": "In alto a destra",
    "figura.config.button_location.4": "In basso a sinistra",
    "figura.config.button_location.5": "In basso a destra",
    "figura.config.update_channel": "Tipo di Update",
    "figura.config.update_channel.tooltip": "Cambia il tipo di versione quando cercando per nuovi aggiornamenti di Figura",
    "figura.config.update_channel.1": "None",
    "figura.config.update_channel.2": "Rilascio (Stabile)",
    "figura.config.update_channel.3": "Pre-Rilasci (Instabile)",
    "figura.config.easter_eggs": "Attiva Easter Eggs",
    "figura.config.easter_eggs.tooltip": "Alterna aspetti divertenti e inaspettati di Figura (Noioso!)",
    "figura.config.dev": "Dev",
    "figura.config.dev.tooltip": "Impostazioni Developer/Sperimentali",
    "figura.config.connection_toasts": "Toast Connessione Backend",
    "figura.config.connection_toasts.tooltip": "Alterna se il gioco dovrebbe mostrate dei toast correlati allo stato di connessione con la backend",
    "figura.config.render_debug_parts_pivot": "Rendera I pivot delle Parti",
    "figura.config.render_debug_parts_pivot.tooltip": "Rendera I pivot da %d e %d quando gli rendering debug degli hitbox è abilitato",
    "figura.config.render_debug_parts_pivot.tooltip.cubes": "cubi",
    "figura.config.render_debug_parts_pivot.tooltip.groups": "gruppi",
    "figura.config.render_debug_parts_pivot.1": "Off",
    "figura.config.render_debug_parts_pivot.2": "Solo visibile",
    "figura.config.render_debug_parts_pivot.3": "Tutto",
    "figura.config.log_others": "Log non-host degli script",
    "figura.config.log_others.tooltip": "Permetti il logging di debug ed errori degli script non-host",
    "figura.config.log_pings": "Log dei Pings",
    "figura.config.log_pings.tooltip": "Scegli se I loggare le informazioni dei pings",
    "figura.config.log_pings.1": "Off",
    "figura.config.log_pings.2": "Chat",
    "figura.config.log_pings.3": "Logger",
    "figura.config.sync_pings": "Pings Syncronizza pings",
    "figura.config.sync_pings.tooltip.1": "Alterna se i ping dovrebbe essere eseguiti solo quando ricevuti dalla backend",
    "figura.config.sync_pings.tooltip.2": "Prendi nota che: no backend significa nessun ping!",
    "figura.config.chat_messages": "Messaggi della Chat",
    "figura.config.chat_messages.tooltip.1": "Alterna se gli script possono cambiare e/o mandare messaggi in chat per te",
    "figura.config.chat_messages.tooltip.2": "Questa è un opzione pericolosa, visto che i messaggi nella chat saranno comunque segnati",
    "figura.config.chat_messages.tooltip.3": "Figura non prende nessuna responsabilità per l'uso di questa feature",
    "figura.config.main_dir": "Posizione della cartella di Figura",
    "figura.config.main_dir.tooltip": "Cambia la posizione della cartella di Figura",
    "figura.command.click_to_open": "Clicca qui per aprire",
    "figura.command.load.loading": "Caricamento avatar!",
    "figura.command.load.invalid": "Percorso invalido \"%s\"",
    "figura.command.docs_export.success": "Esporarta la documentazione di Figura nella directory Figura",
    "figura.command.docs_export.error": "Esportazione della documentazione di Figura Fallita!",
    "figura.command.docs_type_hover": "clicca per mostrare la documentazione di%s",
    "figura.command.debug.success": "Salvati dati di debug nella directory Figura",
    "figura.command.debug.error": "Salvataggio dei dati di debug fallito!",
    "figura.docs": "Il comando \"/figura docs\" ti permette di accedere alla documentazione di tutti i tipi e funzioni che Figura aggiunge al suo ambiente di lua scripting",
    "figura.docs.text.type": "Tipo",
    "figura.docs.text.description": "Descrizione",
    "figura.docs.text.function": "Funzione",
    "figura.docs.text.syntax": "Sintassi",
    "figura.docs.text.returns": "Restituisce",
    "figura.docs.text.field": "Campo",
    "figura.docs.text.editable": "Modificabile",
    "figura.docs.text.not_editable": "Non modificabile",
    "figura.docs.text.entries": "Voci",
    "figura.docs.text.extends": "estende",
    "figura.docs.enum": "Contiene tutte i valori string specifici usati in altre funzioni",
    "figura.docs.enum.empty": "Non ci sono valori in questo enumeratore!",
    "figura.docs.enum.keybinds": "Lista di tasti assegnabili. Usati nella KeybindAPi",
    "figura.docs.enum.parent_types": "Lista di validi ParentTypes. Usati nel ModelParts.",
    "figura.docs.enum.render_types": "Lista di validi RenderTypes. Usati nel ModelParts.",
    "figura.docs.enum.texture_types": "Lista di validi TextureTypes. Usati nel ModelParts.",
    "figura.docs.enum.key_ids": "Lista di validi KeyIDs. Usati nella KeybindAPI.",
    "figura.docs.enum.entity_poses": "Lista di validi EntityPoses. Usati nella EntityAPI.",
    "figura.docs.enum.post_effects": "Lista di Validi PostEffects. Usati nella RendererAPI.",
    "figura.docs.enum.play_states": "Lista di validi PlayStates. Usati con le Blockbench animations.",
    "figura.docs.enum.loop_modes": "Lista di validi LoopModes. Usati con leBlockbench animations.",
    "figura.docs.enum.colors": "Lista di colori personallizati. Usati ovunque dove puoi mettere un colore esadecimale.",
    "figura.docs.enum.player_model_parts": "List of valid PlayerModelParts. Used within the PlayerAPI.",
    "figura.docs.globals": "Documentazione per le molte cose ch Figura aggiunge allo stato globale di Lua.",
    "figura.docs.globals.vec": "Un alias per \"vectors.vec\",visto che è usato così spesso.",
    "figura.docs.globals.require": "la funzione require() prende il nome di uno dei tuoi script, senza l'estensione .lua. Se questo script non è stato eseguito prima, eseguirà lo script e restituisce il valore che lo script restituisce. Se è stato eseguito prima, non eseguirà il file di nuovo, ma restituirà la stessa cosa dell prima volta. se uno script richiesto non restituisce niente, require() restituirà vero. se il nome che hai dato non è nessuno dei tuoi script, darà un errore.",
    "figura.docs.globals.type": "Figura sovvrascrive la funzione type() di lua. Quando usato con tipi Figura, restituirà il nome del tipo visto come nei docs e nella figuraMetatables globale. Quando chiamato in una table che ha come metatable con una __type key, restituisce il valore corrispondente.",
    "figura.docs.globals.print": "Una funzione che stampa i suoi argomenti nella chat. anche se la sintassi dice solo un argomento, puoi mettere quanti ne vuoi. sarenno tutti scritti, e saranno separati da degli spazi.",
    "figura.docs.globals.print_table": "Il primo argomento è o una Table, o è un Userdata, che si riferisce a ogni tipo che Figura aggiunge. Stampa la table in chat, formattato in modo specifico. Se l'Userdata è passato attraverso, è automaticamente convertito in una table o stringa, e mostrato. nel caso delle tables dentro tables, il parametro \"maxDepth\" sarà usato per determinare quanto lontano andare. FAI ATTENZIONE CON LE TABLES RECURSIVE! se provi a stampare una table troppo in profondità, il tuo gioco potrebbe bloccarsi mentre calcola tutto quello da stampare, e potresti dover riaprire il tuo clien se esageri troppo. il valore default per maxDepth è 1.",
    "figura.docs.globals.print_json": "Prende una string json di Minecraft come argomento, e lo stampa alla chat formattato.",
    "figura.docs.globals.action_wheel": "L'instanza globale per l'ActionWheelAPI e i suoi subtypes.",
    "figura.docs.globals.animations": "L'instanza globale per la table \"animations\" e i suoi subtypes .",
    "figura.docs.globals.figura_metatables": "una table che contiene tutti le metatables per gli tipi oggetto di Figura, le metatables sono modificabili.",
    "figura.docs.globals.nameplate": "L'instanza globale della NameplateAPI e i suoi subtypes.",
    "figura.docs.globals.world": "L'instanza globale della WorldAPI e i suoi subtypes.",
    "figura.docs.globals.vanilla_model": "L'instanza globale della NameplateAPI e i suoi subtypes.",
    "figura.docs.globals.models": "L'instanza globale degli Modelli dell'Avatar e i suoi subtypes.",
    "figura.docs.globals.player": "L'instanza globale della EntityAPI e i suoi subtypes.",
    "figura.docs.globals.events": "L'instanza globale della EventsAPI e i suoi subtypes.",
    "figura.docs.globals.vectors": "L'instanza globale della VectorsAPI e i suoi subtypes.",
    "figura.docs.globals.matrices": "L'instanza globale della MatricesAPI e i suoi subtypes.",
    "figura.docs.globals.particles": "L'instanza globale della ParticlesAPi.",
    "figura.docs.globals.sounds": "L'instanza globale della SoundsAPI.",
    "figura.docs.globals.client": "L'instanza globale della ClientAPI.",
    "figura.docs.globals.host": "L'instanza globale della HostAPI.",
    "figura.docs.globals.avatar": "L'instanza globale della AvatarAPI.",
    "figura.docs.globals.renderer": "L'instanza globale della RendererAPI.",
    "figura.docs.globals.user": "Un alias per player, in caso che l'utente del tuo avatar non sia un player (previsione?)",
    "figura.docs.globals.pings": "L'instanza globale della PingAPI",
    "figura.docs.math": "Contiene funzioni che Figura aggiunge alla libreria default \"math\" di Lua.",
    "figura.docs.math.player_scale": "La costante della dimensione del player in relazione al mondo.",
    "figura.docs.math.world_scale": "La costante della dimensione del mondo in relazione al giocatore.",
    "figura.docs.math.lerp": "Interpola linearmente dal primo argomento al secondo argomento, con il terzo argomento come parametro. Funziona con entrambi numeri normali e vettori.",
    "figura.docs.math.clamp": "Limita il valore dato tra un minimo e un massimo.",
    "figura.docs.math.round": "Rounds the given number to the nearest whole integer.",
    "figura.docs.math.map": "a il valore dato con l'intervallo a un altro. Per esempio, se hai un valore di 20 e un intervallo di 0-200, e vuoi mapparlo all'intervallo 100-200, il risultato sarà 110.",
    "figura.docs.math.short_angle": "Restituisce l'angolo più piccolo in mezzo a due angoli. Per esempio, se hai un angolo di 350 gradi e vuoi prendere l'angolo più piccolo in mezzo a quello e 0 gradi, il risulato sarà 10 gradi.",
    "figura.docs.math.lerp_angle": "Simile alla funzione lerp default, ma i numeri sono limitati in un intervallo di 0-360. il Lerp è fatto verso l'angolo più piccolo. Per esempio, un lerp di 350 e 20, con un fattore di 0.75, restituirà 310.",
    "figura.docs.math.sign": "Restituisce il segno di un numbro dato, Restituisce 1 se il numero è positivo, -1 se il numero è negativo, e 0 se è 0.",
    "figura.docs.action_wheel": "un API globale che è usata per la personalizzazione della Ruota delle azioni del tuo Player.",
    "figura.docs.action_wheel.left_click": "Funzione che è eseguita quando il tasto sinistro del mouse è cliccato.",
    "figura.docs.action_wheel.right_click": "Funzione che è eseguita quando il tasto destro del mouse è cliccato.",
    "figura.docs.action_wheel.scroll": "Funzione che è eseguita quando la rotella del mouse viene girata.",
    "figura.docs.action_wheel.execute": "Esegue l'azione dell'indice dato. se l'indice è null, eseguirà l'ultima azione selezionta. un secondo parametro può essere dato per specificare se dovrebbe eseguire l'azione sinistra o destra.",
    "figura.docs.action_wheel.is_enabled": "Restiuisce se la Ruota delle Azioni è attualmente renderizzata o no.",
    "figura.docs.action_wheel.get_selected": "Restiusice l'indice dell'azione attualmente selezionata.",
    "figura.docs.action_wheel.set_page": "Imposta la Pagina della ruota delle azioni il Titolo o pagina dato.",
    "figura.docs.action_wheel.get_page": "Restituisce una Pagina immagazzinata dal titolo dato",
    "figura.docs.action_wheel.get_current_page": "Restituisce la pagina attualmente impostata dalla Ruota delle Azioni, o NIL se nessuna pagina è stata impostata.",
    "figura.docs.wheel_page": "Un container della Ruota delle Azioni che è usato per contenere fino a 8 azioni.",
    "figura.docs.wheel_page.new_action": "Aggiunge una nuova Azione CLick sull'indice della Pagina seleazionato. Se nessuno Indice è dato, viene aggiunto al primo indice disponibile.",
    "figura.docs.wheel_page.get_action": "Prende un Azione dall'indice di una Pagina dato.",
    "figura.docs.wheel_page.set_action": "Imposta un Azione nell'indice della Pagina dato.",
    "figura.docs.wheel_action": "Un azione nella Ruota delle Azioni di Figura. Una superClasse astratta di Clickaction, ToggleAction e ScrollAction.",
    "figura.docs.wheel_action.get_title": "Prende il titolo di questa Azione.",
    "figura.docs.wheel_action.get_color": "Prende il colore di questa Azione.",
    "figura.docs.wheel_action.get_hover_color": "Prende il colore hover dell'Azione.",
    "figura.docs.animation": "A blockbench animation.",
    "figura.docs.animation.name": "This animation's name.",
    "figura.docs.animation.play": "Initializes the animation. Resume the animation if it was paused.",
    "figura.docs.animation.pause": "Pause the animation's playback.",
    "figura.docs.animation.stop": "Stop the animation.",
    "figura.docs.animation.restart": "Restarts the animation. Plays the animation if it was stopped. This behaviour can also be reproduced by stopping then playing the animation",
    "figura.docs.animation.get_time": "Get the animation's playback current time.",
    "figura.docs.animation.set_time": "Sets the animation's playback current time.",
    "figura.docs.animation.get_play_state": "Get the animation's playback state.",
    "figura.docs.animation.get_blend": "Gets the animation's keyframe blend factor.",
    "figura.docs.animation.get_offset": "Gets the animation's offset time.",
    "figura.docs.animation.get_start_delay": "Gets the animation's start delay.",
    "figura.docs.animation.get_loop_delay": "Gets the animation's loop delay.",
    "figura.docs.animation.get_length": "Gets the animation's length.",
    "figura.docs.animation.get_loop": "Gets the animation's loop mode.",
    "figura.docs.animation.get_priority": "Gets the animation's priority.",
    "figura.docs.animation.get_speed": "Gets the animation's speed.",
    "figura.docs.avatar": "A global API containing functions to interact with your avatar's metadata, and also to get information about the current script environment.",
    "figura.docs.avatar.store": "Store the given key-value pair inside your current avatar's metadata. Someone else can get this information from a different script with the playerVars() function in World. The key must be a string.",
    "figura.docs.avatar.get_current_instructions": "Gets the current number of instructions that have been executed by your avatar. Resets to 0 at the beginning of certain events.",
    "figura.docs.avatar.get_color": "Gets the current color string of your avatar, used as your avatar theme.",
    "figura.docs.avatar.set_color": "Sets the current color string of your avatar, used as your avatar theme.",
    "figura.docs.avatar.get_version": "Gets the version string of this avatar.",
    "figura.docs.avatar.get_authors": "Gets the authors string of this avatar.",
    "figura.docs.avatar.get_name": "Gets the name string of this avatar.",
    "figura.docs.avatar.get_size": "Gets the file size of this avatar in bytes.",
    "figura.docs.avatar.has_texture": "Gets whether or not this avatar has a texture.",
    "figura.docs.avatar.has_script_error": "Gets whether this script currently has stopped due to an error (kinda useless lmao).",
    "figura.docs.avatar.get_init_count": "Gets the number of initialization instructions of this avatar.",
    "figura.docs.avatar.get_entity_init_count": "Gets the number of Events.ENTITY_INIT instructions of this avatar.",
    "figura.docs.avatar.get_max_init_count": "Gets the maximum allowed instructions during initialization in the trust settings of the viewer.",
    "figura.docs.avatar.get_tick_count": "Gets the number of Events.TICK instructions of this avatar last tick.",
    "figura.docs.avatar.get_max_tick_count": "Gets the maximum allowed instructions in Events.TICK in the trust settings of the viewer.",
    "figura.docs.avatar.get_render_count": "Gets the number of Events.RENDER and Events.POST_RENDER instructions of this avatar last frame.",
    "figura.docs.avatar.get_max_render_count": "Gets the maximum allowed instructions in Events.RENDER and Events.POST_RENDER in the trust settings of the viewer.",
    "figura.docs.avatar.get_world_tick_count": "Gets the number of Events.WORLD_TICK instructions of this avatar last tick.",
    "figura.docs.avatar.get_max_world_tick_count": "Gets the maximum allowed instructions in Events.WORLD_TICK in the trust settings of the viewer.",
    "figura.docs.avatar.get_world_render_count": "Gets the number of Events.WORLD_RENDER and Events.POST_WORLD_RENDER instructions of this avatar last frame.",
    "figura.docs.avatar.get_max_world_render_count": "Gets the maximum allowed instructions in Events.WORLD_RENDER and Events.POST_WORLD_RENDER in the trust settings of the viewer.",
    "figura.docs.avatar.get_complexity": "Gets the current complexity of this avatar.",
    "figura.docs.avatar.get_max_complexity": "Gets the maximum allowed model complexity (number of faces) in the trust settings of the viewer.",
    "figura.docs.avatar.get_remaining_particles": "Gets the remaining amount of particles this avatar can summon.",
    "figura.docs.avatar.get_max_particles": "Gets the maximum allowed number of particles in the trust settings of the viewer.",
    "figura.docs.avatar.get_remaining_sounds": "Gets the remaining amount of sound this avatar can play.",
    "figura.docs.avatar.get_max_sounds": "Gets the maximum allowed number of sounds in the trust settings of the viewer.",
    "figura.docs.avatar.get_animation_complexity": "Gets the current animation complexity of this avatar.",
    "figura.docs.avatar.get_max_animation_complexity": "Gets the maximum allowed animation complexity (number of playing channels) in the trust settings of the viewer.",
    "figura.docs.avatar.can_edit_vanilla_model": "Gets whether or not the viewer allows your avatar to edit the vanilla models.",
    "figura.docs.avatar.can_edit_nameplate": "Gets whether or not the viewer allows your avatar to edit your nameplate.",
    "figura.docs.avatar.can_render_offscreen": "Gets whether or not the viewer trusts you to render the avatar off-screen.",
    "figura.docs.avatar.can_use_custom_sounds": "Gets whether or not the viewer allows your avatar to play custom sounds.",
    "figura.docs.biome": "A proxy for a Minecraft biome. Instances are obtained through the WorldAPI. This proxy also contains a saved position for the Biome.",
    "figura.docs.biome.get_pos": "Returns the saved position for this Biome's proxy. The saved position is used in Biome functions that require a position.",
    "figura.docs.biome.set_pos": "Sets the saved position for this Biome's proxy. The saved position is used in Biome functions that require a position.",
    "figura.docs.biome.get_tags": "Gets the worldgen related tags from this Biome.",
    "figura.docs.biome.get_temperature": "Gets the temperature of this biome.",
    "figura.docs.biome.get_precipitation": "Gets the rain type of this biome. The type can be \"NONE\", \"RAIN\" or \"SNOW\".",
    "figura.docs.biome.get_sky_color": "Gets this biome's sky color as a RGB vector.",
    "figura.docs.biome.get_foliage_color": "Gets this biome's foliage color as a RGB vector.",
    "figura.docs.biome.get_grass_color": "Gets this biome's grass color as a RGB vector.",
    "figura.docs.biome.get_fog_color": "Gets this biome's fog color as a RGB vector.",
    "figura.docs.biome.get_water_color": "Gets this biome's water color as a RGB vector.",
    "figura.docs.biome.get_water_fog_color": "Gets this biome's water fog color as a RGB vector.",
    "figura.docs.biome.get_downfall": "Gets this biome's humidity.",
    "figura.docs.biome.is_hot": "Checks if this biome is hot.",
    "figura.docs.biome.is_cold": "Checks if this biome is cold.",
    "figura.docs.blockstate": "A proxy for a block state from Minecraft. Instances are obtained through the WorldAPI. This proxy also contains a saved position for the BlockState.",
    "figura.docs.blockstate.id": "The identifier of the block this BlockState comes from.",
    "figura.docs.blockstate.properties": "A table containing the properties of this BlockState. If this BlockState has no properties, it is nil.",
    "figura.docs.blockstate.get_pos": "Returns the saved position for this BlockState proxy. The saved position is used in BlockState functions that require a position.",
    "figura.docs.blockstate.set_pos": "Sets the saved position for this BlockState proxy. The saved position is used in BlockState functions that require a position.",
    "figura.docs.blockstate.is_translucent": "Gets whether or not the BlockState would propagate sky light downwards.",
    "figura.docs.blockstate.get_opacity": "Gets the opacity of the BlockState, in terms of how much it affects light levels.",
    "figura.docs.blockstate.get_map_color": "Gets the map color of this BlockState, as a Vector3 with R,G,B ranging 0 to 1.",
    "figura.docs.blockstate.is_solid_block": "Gets whether or not the BlockState is considered a \"solid\" block by Minecraft.",
    "figura.docs.blockstate.is_full_cube": "Gets whether or not the BlockState has a full cube as its collision hitbox.",
    "figura.docs.blockstate.get_hardness": "Gets the hardness of the BlockState.",
    "figura.docs.blockstate.get_comparator_output": "Gets the amount of signal strength a comparator would get from this BlockState.",
    "figura.docs.blockstate.has_block_entity": "Gets whether or not this BlockState has an associated block entity.",
    "figura.docs.blockstate.is_opaque": "Gets whether or not this BlockState is opaque.",
    "figura.docs.blockstate.emits_redstone_power": "Gets whether or not this BlockState emits redstone power.",
    "figura.docs.blockstate.get_luminance": "Gets the emission light level of this BlockState.",
    "figura.docs.blockstate.get_friction": "Gets the friction of this BlockState. (Slime blocks and ice in vanilla)",
    "figura.docs.blockstate.get_velocity_multiplier": "Gets the velocity multiplier of this BlockState. (Only Soul sand, honey blocks in vanilla)",
    "figura.docs.blockstate.get_jump_velocity_multiplier": "Gets the jump velocity multiplier of this BlockState. (Literally just honey blocks in vanilla)",
    "figura.docs.blockstate.get_blast_resistance": "Gets the blast resistance of this BlockState.",
    "figura.docs.blockstate.as_item": "Returns an ItemStack representing this block in item form, whatever Minecraft deems that to be. If it cannot find an item for this block, it will return nil.",
    "figura.docs.blockstate.get_tags": "Returns a table containing all the tags of this block, as strings.",
    "figura.docs.blockstate.get_collision_shape": "Returns a table representing the bounding boxes of the collision shape. The table a list of Vector6, where the first 3 coordinates are one corner of the box and the last 3 are the other corner.",
    "figura.docs.blockstate.get_outline_shape": "Returns a table representing the bounding boxes of the outline shape. The table a list of Vector6, where the first 3 coordinates are one corner of the box and the last 3 are the other corner.",
    "figura.docs.blockstate.get_sounds": "Gets the names of all the sounds which can play from this BlockState, as well as their pitch and volume. Stored in a table.",
    "figura.docs.blockstate.get_fluid_tags": "Returns a table containing all the fluid tags of this block, as strings.",
    "figura.docs.blockstate.get_entity_data": "Returns the nbt of the Block Entity associated with this BlockState, at its position, as a table. Since the mod is only on client side, this NBT might not actually contain the real nbt, which is stored server-side.",
    "figura.docs.blockstate.to_state_string": "Converts this BlockState into a string, like you'd see in a Minecraft command.",
    "figura.docs.client": "A global API used to interact with the current Minecraft client. Most of its functions return things that can be found in the F3 menu.",
    "figura.docs.client.get_fps": "Gets the FPS of the client. Returns 0 if the fps counter isn't ready yet (or if your pc is just that bad).",
    "figura.docs.client.get_fps_string": "Gets the FPS string of the client, displayed in the F3 menu. Contains info on the fps, the fps limit, vsync, cloud types, and biome blend radius.",
    "figura.docs.client.is_paused": "Returns true if the client is paused.",
    "figura.docs.client.get_version": "Returns the \"version\" of your client. In testing, this returned \"Fabric\".",
    "figura.docs.client.get_server_brand": "Returns the type of server you're on. In singleplayer, this is \"Integrated\".",
    "figura.docs.client.get_chunk_statistics": "Returns a string containing information about the player's chunk. This string appears in the F3 menu.",
    "figura.docs.client.get_entity_statistics": "Returns a string containing information about the loaded entities on the client. This string appears in the F3 menu.",
    "figura.docs.client.get_sound_statistics": "Returns a string containing information about the currently playing sounds on the client. This string appears in the F3 menu.",
    "figura.docs.client.get_entity_count": "Returns the number of currently loaded entities.",
    "figura.docs.client.get_particle_count": "Returns the number of currently loaded particles.",
    "figura.docs.client.get_current_effect": "Returns the path to the currently applied shader, used when spectating an entity that has different vision than normal. Normally returns nil.",
    "figura.docs.client.get_java_version": "Returns your current Java version you're playing Minecraft with.",
    "figura.docs.client.get_used_memory": "Returns the number of bytes of memory Minecraft is currently using.",
    "figura.docs.client.get_max_memory": "Returns the maximum amount of memory that Minecraft will try to use.",
    "figura.docs.client.get_allocated_memory": "Returns the maximum amount of memory that Minecraft can possibly use.",
    "figura.docs.client.is_window_focused": "Returns true if the Minecraft window is currently focused.",
    "figura.docs.client.is_hud_enabled": "Returns true if the hud is enabled (F1 disables the HUD).",
    "figura.docs.client.is_debug_overlay_enabled": "Returns true if the F3 screen is currently open.",
    "figura.docs.client.get_window_size": "Returns the size of the Minecraft window in pixels, as {width, height}.",
    "figura.docs.client.get_fov": "Returns the current FOV option of the client, not including additional effects such as speed or sprinting.",
    "figura.docs.client.get_system_time": "Returns the current system time in milliseconds.",
    "figura.docs.client.get_mouse_pos": "Returns the position of the mouse in pixels, relative to the top-left corner.",
    "figura.docs.client.get_scaled_window_size": "Returns the size of the window in Minecraft's interal GUI units.",
    "figura.docs.client.get_gui_scale": "Returns the current value of your Gui Scale setting. If you use auto, then it gets the actual current scale.",
    "figura.docs.client.get_camera_pos": "Returns the position of the viewer's camera.",
    "figura.docs.client.get_camera_rot": "Returns the rotation of the viewer's camera.",
    "figura.docs.client.get_text_width": "Returns the width of the given text in pixels. In case of multiple lines, return the largest width of all lines",
    "figura.docs.client.get_text_height": "Returns the height of the given text in pixels.",
    "figura.docs.client.get_active_lang": "Returns a string representation of the current game language.",
    "figura.docs.client.get_figura_version": "Gets the client Figura version.",
    "figura.docs.client.compare_versions": "Compares two versions if they are less than (-1), equals (0) or greater than (1).",
    "figura.docs.entity": "Acts as a proxy for an entity in the Minecraft world.",
    "figura.docs.entity.is_loaded": "Checks if this entity object is still being updated and loaded. A non loaded entity would be someone who is in another dimension or out of the render distance for example.",
    "figura.docs.entity.get_pos": "Gets the position of the entity in the world. If delta is passed in, then it will be used to linearly interpolate the position of the entity between the previous tick and the current tick. The default value of delta is 1.",
    "figura.docs.entity.get_rot": "Gets the rotation of the entity in degrees. If delta is passed in, then it will be used to linearly interpolate the rotation of the entity between the previous tick and the current tick. The default value of delta is 1.",
    "figura.docs.entity.get_uuid": "Gets the UUID of the proxied entity.",
    "figura.docs.entity.get_type": "Gets the Minecraft identifier of this entity. For instance, \"minecraft:pig\".",
    "figura.docs.entity.get_velocity": "Gets the current velocity of this entity in world coordinates, calculated as its position this tick minus its position last tick.",
    "figura.docs.entity.get_look_dir": "Returns a unit vector pointing in the direction that this entity is looking. See the blue line in the F3+B screen for an example.",
    "figura.docs.entity.get_frozen_ticks": "Gets the number of ticks this entity has been freezing in powder snow for.",
    "figura.docs.entity.get_max_air": "Gets the maximum amount of air this entity can have.",
    "figura.docs.entity.get_dimension_name": "Gets the Minecraft identifier of the dimension this entity is in.",
    "figura.docs.entity.get_pose": "Returns the current pose of the player. This can be one of: \"STANDING\", \"FALL_FLYING\", \"SLEEPING\", \"SWIMMING\", \"SPIN_ATTACK\", \"CROUCHING\", \"LONG_JUMPING\", or \"DYING\".",
    "figura.docs.entity.get_vehicle": "Returns a proxy for the entity that this player is currently riding. If the player isn't riding anything, returns nil.",
    "figura.docs.entity.is_on_ground": "Returns whether or not this entity is currently on the ground.",
    "figura.docs.entity.get_eye_height": "Returns the current eye height of this entity.",
    "figura.docs.entity.get_bounding_box": "Returns the size of this entity's bounding box as a Vector3. {x, y, z} are the width, height, and width. Minecraft entity hitboxes always have square bases.",
    "figura.docs.entity.get_name": "Gets the name of this entity, if it has a custom name. If it doesn't, returns a translated form of getType().",
    "figura.docs.entity.is_wet": "Returns true in any of three conditions: if the entity is in water, if the entity is in rain, or if the entity is in a bubble column. Otherwise, returns false.",
    "figura.docs.entity.is_in_water": "Returns true if this entity is currently in a water block, including waterlogging.",
    "figura.docs.entity.is_underwater": "Returns true if this entity's eyes are touching water.",
    "figura.docs.entity.is_in_lava": "Returns true if this entity is currently in lava.",
    "figura.docs.entity.is_in_rain": "Returns true if this entity is currently standing in rain.",
    "figura.docs.entity.has_avatar": "Returns true if Figura has an avatar loaded for this entity.",
    "figura.docs.entity.is_sprinting": "Returns true if this entity is currently sprinting.",
    "figura.docs.entity.get_eye_y": "Returns the Y level of this entity's eyes. Not to be confused with getEyeHeight, this function also takes the entity itself's Y position into account.",
    "figura.docs.entity.is_glowing": "Returns true if this entity is currently glowing.",
    "figura.docs.entity.is_invisible": "Returns true if this entity is invisible, for one reason or another.",
    "figura.docs.entity.is_silent": "Returns true if this entity is silent.",
    "figura.docs.entity.is_sneaking": "Returns true if this entity is sneaking.",
    "figura.docs.entity.get_item": "Gets an ItemStack for the item in the given slot. For the player, slots are indexed with 1 as the main hand, 2 as the off hand, and 3,4,5,6 as the 4 armor slots from the boots to the helmet. If an invalid slot number is given, this will return nil.",
    "figura.docs.entity.get_nbt": "Gets a table containing the NBT of this entity. Please note that not all values in the entity's NBT may be synced, as some are handled only on server side.",
    "figura.docs.entity.is_on_fire": "Returns true if this entity is currently on fire.",
    "figura.docs.entity.get_targeted_block": "Returns a proxy for your currently targeted BlockState. This BlockState appears on the F3 screen. Maximum and Default distance is 20, Minimum is -20",
    "figura.docs.entity.get_variable": "Gets the value of a variable this entity stored in themselves using the Avatar api's store() function.",
    "figura.docs.living_entity": "Acts as a proxy for a living entity in the Minecraft world.",
    "figura.docs.living_entity.get_body_yaw": "Gets the yaw of this entity's body in degrees. If delta is passed in, then it will be used to linearly interpolate the rotation of the body between the previous tick and the current tick. The default value of delta is 1.",
    "figura.docs.living_entity.get_held_item": "Returns an ItemStack representing the item in this entity's main hand. If true is passed in for \"offhand\", then it will instead look at the item in the entity's offhand. If the entity isn't holding an item in that hand, returns nil.",
    "figura.docs.living_entity.get_health": "Returns the amount of health this entity has remaining.",
    "figura.docs.living_entity.get_max_health": "Returns the maximum amount of health this entity can have.",
    "figura.docs.living_entity.get_armor": "Returns the amount of armor points this entity has.",
    "figura.docs.living_entity.get_death_time": "Returns the number of ticks this entity has been dead for.",
    "figura.docs.living_entity.get_arrow_count": "Returns the number of arrows sticking out of this entity.",
    "figura.docs.living_entity.get_stinger_count": "Returns the number of bee stingers sticking out of this entity.",
    "figura.docs.living_entity.is_left_handed": "Returns true if the entity's main hand is its left.",
    "figura.docs.living_entity.is_using_item": "Returns true if the entity is currently using an item.",
    "figura.docs.living_entity.get_active_hand": "Returns \"OFF_HAND\" or \"MAIN_HAND\", depending on which hand this entity uses an item with.",
    "figura.docs.living_entity.get_active_item": "Returns an ItemStack representing the item the entity is currently using. If they're not using any item, returns nil.",
    "figura.docs.living_entity.is_climbing": "Returns true if the entity is currently using a climbable block, like a ladder or vine.",
    "figura.docs.player": "Acts as a proxy for a player entity in the Minecraft world. A global instance exists for the avatar's user, under the name \"player\".",
    "figura.docs.player.get_food": "Gets the current food level of the player, from 0 to 20.",
    "figura.docs.player.get_saturation": "Gets the current saturation level of the player.",
    "figura.docs.player.get_experience_progress": "Gets the progress of the way towards the player's next level, as a value from 0 to 1.",
    "figura.docs.player.get_experience_level": "Gets the player's current level.",
    "figura.docs.player.get_model_type": "Returns \"SLIM\" or \"DEFAULT\", depending on the player's model type.",
    "figura.docs.player.get_gamemode": "Returns \"SURVIVAL\", \"CREATIVE\", \"ADVENTURE\", or \"SPECTATOR\" depending on the player's gamemode. If the gamemode is unknown, returns nil.",
    "figura.docs.player.is_skin_layer_visible": "Returns whether the specified skin layer, from the Skin Customizations settings, is currently visible.",
    "figura.docs.events": "A global API that contains all of the figura Events. Accessed using the name \"events\".",
    "figura.docs.events.entity_init": "The ENTITY_INIT event is run once this avatar's entity exists.",
    "figura.docs.events.tick": "The TICK event is run every tick in-game if this avatar's entity exists.",
    "figura.docs.events.world_tick": "The WORLD_TICK event is run every in-game tick.",
    "figura.docs.events.render": "The RENDER event is run every frame, before the avatar is rendered. Takes a parameter delta, which is a number from 0 to 1 indicating the proportion of the way the game is between ticks.",
    "figura.docs.events.post_render": "The POST_RENDER event runs every frame, after the avatar is rendered. Takes a parameter delta, which is a number from 0 to 1 indicating the proportion of the way the game is between ticks.",
    "figura.docs.events.world_render": "The WORLD_RENDER event is run every frame, before the world is rendered. Always runs when a world is visible, even when the avatar itself is not, so this runs even in first person. Takes a parameter delta, which is a number from 0 to 1 indicating the proportion of the way the game is between ticks.",
    "figura.docs.events.post_world_render": "The POST_WORLD_RENDER event runs every frame, after the world is rendered. Always runs when a world is visible, even when the avatar itself is not, so this runs even in first person. Takes a parameter delta, which is a number from 0 to 1 indicating the proportion of the way the game is between ticks.",
    "figura.docs.events.chat_send_message": "The CHAT_SEND_MESSAGE event is run every time you send a message in chat. A string parameter is passed in, which contains the message that was sent.",
    "figura.docs.events.chat_receive_message": "The CHAT_RECEIVE_MESSAGE event is run every time a message is received in chat. A string parameter is passed in, which contains the message you received.",
    "figura.docs.events.skull_render": "Called between POST_RENDER and POST_WORLD_RENDER, on every one of your skull blocks placed in the world. The arguments are the tick delta and the position of the skull as a vector.",
    "figura.docs.events.mouse_scroll": "The MOUSE_SCROLL event runs every time the mouse is scrolled. Takes a parameter delta, which is the direction of the scroll.",
    "figura.docs.event": "A hook for a certain event in Minecraft. You may register functions to one, and those functions will be called when the event occurs.",
    "figura.docs.event.register": "Registers the given function to the given event. When the event occurs, the function will be run. Functions are run in the order they were registered. The optional name parameter is used when you wish to later remove a function from the event.",
    "figura.docs.event.clear": "Clears the given event of all its functions.",
    "figura.docs.event.remove": "Removes all functions with the given name from the event. Returns the number of functions that were removed.",
    "figura.docs.host": "A global API dedicated to specifically the host of the avatar. For other viewers, these do nothing.",
    "figura.docs.host.unlock_cursor": "Setting this value to true will unlock your cursor, letting you move it freely on the screen instead of it controlling your player's rotation.",
    "figura.docs.host.is_host": "Returns true if this instance of the script is running on host.",
    "figura.docs.host.set_title_times": "Sets the duration of the title on the screen, also its fade-in and fade-out durations.",
    "figura.docs.host.clear_title": "Clears the current title from the GUI.",
    "figura.docs.host.set_title": "Sets the current title to the given text. The text is given as json.",
    "figura.docs.host.set_subtitle": "Sets the current subtitle to the given text. The text is given as json.",
    "figura.docs.host.set_actionbar": "Sets the action bar message to the given text. The boolean parameter defaults to false.",
    "figura.docs.host.send_chat_message": "Sends the given message in the chat.",
    "figura.docs.host.send_chat_command": "Sends the given command in the chat.",
    "figura.docs.host.append_chat_history": "Appends the message on the recent chat history.",
    "figura.docs.host.swing_arm": "Animates swinging the player's arm. If the boolean is true, then the offhand is the one that swings.",
    "figura.docs.host.is_first_person": "Returns true if the camera is in first person mode.",
    "figura.docs.host.is_camera_backwards": "Returns true if the camera is facing backwards.",
    "figura.docs.host.get_slot": "Gets an ItemStack for the item in the given slot. Should use the same syntax for slots as the /item command.",
    "figura.docs.host.get_chat_color": "Gets the chat window text color.",
    "figura.docs.host.set_chat_color": "Sets the color of the text that is currently being typed into the chat window.",
    "figura.docs.host.get_chat_text": "Gets the text that is currently being typed into the chat window.",
    "figura.docs.host.set_chat_text": "Sets the text currently being typed in the chat window to the given string.",
    "figura.docs.host.get_screen": "Gets the class name of the screen the player is currently on. If the player is not currently in a screen, returns nil.",
    "figura.docs.host.is_chat_open": "Checks if the host has the chat screen opened.",
    "figura.docs.host.is_container_open": "Checks if the host has a container screen opened.",
    "figura.docs.itemstack": "A proxy for an item stack from Minecraft.",
    "figura.docs.itemstack.id": "Contains the id of the item this ItemStack refers to.",
    "figura.docs.itemstack.tag": "A table containing the NBT tag of this ItemStack. If this ItemStack has nothing in its tag, it is nil.",
    "figura.docs.itemstack.get_count": "Gets the number of items in this stack.",
    "figura.docs.itemstack.get_damage": "Gets the damage value of the item in this stack. Works on things like tools, or other things with a durability bar.",
    "figura.docs.itemstack.has_glint": "Returns true if this item glows with enchantment glint.",
    "figura.docs.itemstack.get_tags": "Gets all the tags of this item as strings in a table.",
    "figura.docs.itemstack.is_block_item": "Returns true if this item represents a block.",
    "figura.docs.itemstack.is_food": "Returns true if this item is edible.",
    "figura.docs.itemstack.get_use_action": "Returns the name of the animation that plays when using this item.",
    "figura.docs.itemstack.get_name": "Gets the name of the item.",
    "figura.docs.itemstack.get_max_count": "Gets the maximum stack size of this item.",
    "figura.docs.itemstack.get_rarity": "Gets the rarity of this item stack. COMMON = white, UNCOMMON = yellow, RARE = aqua, EPIC = light purple.",
    "figura.docs.itemstack.is_enchantable": "Returns true if this item stack can be put in an enchanting table.",
    "figura.docs.itemstack.get_max_damage": "Gets the maximum durability of this item stack.",
    "figura.docs.itemstack.is_damageable": "Returns true if this item stack has durability.",
    "figura.docs.itemstack.is_stackable": "Returns true if the item is stackable.",
    "figura.docs.itemstack.get_repair_cost": "Gets the repair cost modifier, in an anvil, for this item stack.",
    "figura.docs.itemstack.get_use_duration": "Gets the number of ticks needed to \"use\" this item. Currently only has a use for food items. Always 32 for food items except kelp, which is 16.",
    "figura.docs.itemstack.to_stack_string": "Converts this ItemStack to a string, like you'd see in a command.",
    "figura.docs.keybind": "Represents a key binding for your script. Instances are obtained using the KeybindAPI's create() function.",
    "figura.docs.keybind.set_key": "Sets the key for this keybind.",
    "figura.docs.keybind.is_default": "Checks whether this key is currently set to its default state (not been changed using the keybind menu)",
    "figura.docs.keybind.get_key": "Gets the current key for this keybind.",
    "figura.docs.keybind.get_key_name": "Gets the name of the current key for this keybind.",
    "figura.docs.keybind.get_name": "Gets the name of the keybind, which you set when you created the keybind.",
    "figura.docs.keybind.is_pressed": "Gets whether this keybind is currently pressed down.",
    "figura.docs.matrices": "A global API which provides functions dedicated to creating and otherwise manipulating matrices. Accessed using the name \"matrices\".",
    "figura.docs.matrices.mat2": "Creates a Matrix2 using the given parameters as columns. If you call the function with no parameters, returns the 2x2 identity matrix.",
    "figura.docs.matrices.mat3": "Creates a Matrix3 using the given parameters as columns. If you call the function with no parameters, returns the 3x3 identity matrix.",
    "figura.docs.matrices.mat4": "Creates a Matrix4 using the given parameters as columns. If you call the function with no parameters, returns the 4x4 identity matrix.",
    "figura.docs.matrices.rotation2": "Creates a new Matrix2 that rotates by the specified angle. Angle is given in degrees.",
    "figura.docs.matrices.rotation3": "Creates a new Matrix3 that rotates by the specified angles. Angles are given in degrees, and the rotation order is ZYX.",
    "figura.docs.matrices.x_rotation3": "Creates a new Matrix3 that rotates by the specified angle around the X axis. Angle is given in degrees.",
    "figura.docs.matrices.y_rotation3": "Creates a new Matrix3 that rotates by the specified angle around the Y axis. Angle is given in degrees.",
    "figura.docs.matrices.z_rotation3": "Creates a new Matrix3 that rotates by the specified angle around the Z axis. Angle is given in degrees.",
    "figura.docs.matrices.rotation4": "Creates a new Matrix4 that rotates by the specified angles. Angles are given in degrees, and the rotation order is ZYX.",
    "figura.docs.matrices.x_rotation4": "Creates a new Matrix4 that rotates by the specified angle around the X axis. Angle is given in degrees.",
    "figura.docs.matrices.y_rotation4": "Creates a new Matrix4 that rotates by the specified angle around the Y axis. Angle is given in degrees.",
    "figura.docs.matrices.z_rotation4": "Creates a new Matrix4 that rotates by the specified angle around the Z axis. Angle is given in degrees.",
    "figura.docs.matrices.scale2": "Creates a new Matrix2 that scales by the specified factors.",
    "figura.docs.matrices.scale3": "Creates a new Matrix3 that scales by the specified factors.",
    "figura.docs.matrices.scale4": "Creates a new Matrix4 that scales by the specified factors.",
    "figura.docs.matrices.translate4": "Creates a new Matrix4 that translates by the specified offset.",
    "figura.docs.matrices.translate3": "Creates a new Matrix3 that translates by the specified offset.",
    "figura.docs.matrix2": "A matrix with 2 rows and 2 columns.",
    "figura.docs.matrix3": "A matrix with 3 rows and 3 columns.",
    "figura.docs.matrix4": "A matrix with 4 rows and 4 columns.",
    "figura.docs.matrix_n.copy": "Creates and returns a new copy of this matrix.",
    "figura.docs.matrix_n.get_column": "Gets the given column of this matrix, as a vector. Indexing starts at 1, as usual.",
    "figura.docs.matrix_n.get_row": "Gets the given row of this matrix, as a vector. Indexing starts at 1, as usual.",
    "figura.docs.matrix_n.set": "Sets this matrix to have the same values as the matrix passed in. Returns self for chaining.",
    "figura.docs.matrix_n.multiply": "Multiplies this matrix by the other matrix, with the other matrix on the left. Returns self for chaining.",
    "figura.docs.matrix_n.right_multiply": "Multiplies this matrix by the other matrix, with the other matrix on the right. Returns self for chaining.",
    "figura.docs.matrix_n.transpose": "Transposes this matrix, changing the values inside. Transposing means to swap the rows and the columns. Returns self for chaining.",
    "figura.docs.matrix_n.transposed": "Returns a copy of this matrix, but transposed. Transposing means to swap the rows and the columns.",
    "figura.docs.matrix_n.invert": "Inverts this matrix, changing the values inside. Returns self for chaining.",
    "figura.docs.matrix_n.inverted": "Returns a copy of this matrix, but inverted.",
    "figura.docs.matrix_n.det": "Calculates and returns the determinant of this matrix.",
    "figura.docs.matrix_n.reset": "Resets this matrix back to the identity matrix. Returns self for chaining.",
    "figura.docs.matrix_n.add": "Adds the other matrix to this one. Returns self for chaining.",
    "figura.docs.matrix_n.sub": "Subtracts the other matrix from this one. Returns self for chaining.",
    "figura.docs.matrix_n.scale": "Scales this matrix by the specified amount, changing the values inside. Returns self for chaining.",
    "figura.docs.matrix_n.translate": "Translates this matrix by the specified amount, changing the values inside. Returns self for chaining.",
    "figura.docs.matrix_n.rotate_x": "Rotates this matrix around the X axis by the specified number of degrees. Returns self for chaining.",
    "figura.docs.matrix_n.rotate_y": "Rotates this matrix around the Y axis by the specified number of degrees. Returns self for chaining.",
    "figura.docs.matrix_n.rotate_z": "Rotates this matrix around the Z axis by the specified number of degrees. Returns self for chaining.",
    "figura.docs.matrix_n.rotate": "Rotates this matrix by the specified amount, changing the values inside. Angles are given in degrees. Returns self for chaining.",
    "figura.docs.matrix_n.deaugmented": "Deaugments this matrix, removing a row and column.",
    "figura.docs.matrix_n.augmented": "Augments this matrix, adding an additional row and column. Puts a 1 along the diagonal in the new spot, and the rest are zero.",
    "figura.docs.matrix_n.apply": "Treats the given values as a vector, augments this vector with a 1, multiplies it against the matrix, and returns a deaugmented vector of the first values.",
    "figura.docs.matrix_n.apply_dir": "Treats the given values as a vector, augments this vector with a 0, multiplies it against the matrix, and returns a deaugmented vector of the first values.",
    "figura.docs.model_part": "Represents a node in the model tree, basically a group/cube/mesh in Blockbench. Each bbmodel file is itself a ModelPart, and all of your models are contained in a global ModelPart called \"models\".",
    "figura.docs.model_part.get_name": "The name of this model part.",
    "figura.docs.model_part.get_parent": "Gets the parent part of this part. If this part has no parent, returns nil.",
    "figura.docs.model_part.get_children": "Gets the children of this part, stored in a table.",
    "figura.docs.model_part.get_pos": "Gets the position of the model part, as an offset from its position in blockbench. Only changes from {0,0,0} when you call setPos().",
    "figura.docs.model_part.set_pos": "Sets the position offset for this part from its blockbench position. Nil values for position are assumed to be 0.",
    "figura.docs.model_part.get_anim_pos": "Gets the position offset provided by the currently active animation of this model part.",
    "figura.docs.model_part.get_rot": "Gets the rotation of the model part, including its rotation in blockbench. For relative rotation values, check out the \"offset\" rot functions.",
    "figura.docs.model_part.set_rot": "Sets the absolute rotation for this part. Nil values for rotation are assumed to be 0. Angles are given in degrees. For relative rotation values, check out the \"offset\" rot functions.",
    "figura.docs.model_part.get_offset_rot": "Gets the offset rotation of the model part, offset from its rotation in blockbench. For absolute rotation values, check out the non-offset rot functions.",
    "figura.docs.model_part.get_anim_rot": "Gets the rotation offset provided by the currently active animation of this model part.",
    "figura.docs.model_part.get_scale": "Gets the scale of the model part, as a multiple of its blockbench size. Only changes from {1,1,1} when you call setScale().",
    "figura.docs.model_part.set_scale": "Sets the scale factor for this part. Nil values for scale are assumed to be 1.",
    "figura.docs.model_part.get_anim_scale": "Gets the scale multiplier provided by the currently active animation of this model part.",
    "figura.docs.model_part.get_pivot": "Gets the pivot point of the model part, including its pivot in blockbench. For relative values, check out the \"offset\" pivot functions.",
    "figura.docs.model_part.set_pivot": "Sets the absolute pivot for this part. Nil values are assumed to be 0. For relative pivot offsets, check out the \"offset\" pivot functions.",
    "figura.docs.model_part.get_offset_pivot": "Gets the offset pivot of the model part, offset from its pivot in blockbench. For absolute pivot point values, check out the non-offset pivot functions.",
    "figura.docs.model_part.get_position_matrix": "Recalculates the matrix for this model part, based on its current position, rotation, scale, and pivot, then returns this matrix.",
    "figura.docs.model_part.get_position_matrix_raw": "Returns the position matrix for this model part. The Raw version of the function is different in that it doesn't recalculate the matrix before getting it.",
    "figura.docs.model_part.get_normal_matrix": "Recalculates the normal matrix for this model part, based on its current position, rotation, scale, and pivot, then returns this matrix.",
    "figura.docs.model_part.get_normal_matrix_raw": "Returns the normal matrix for this model part. The Raw version of the function is different in that it doesn't recalculate the matrix before returning it.",
    "figura.docs.model_part.set_matrix": "Sets the given matrix as the position matrix for this model part. The normal matrix is automatically calculated as the inverse transpose of this matrix. Calling this DOES NOT CHANGE the values of position, rot, or scale in the model part. If you call setPos() or a similar function, the effects of setMatrix() will be overwritten.",
    "figura.docs.model_part.get_visible": "Gets whether or not this model part is visible. The default value is nil, meaning it copies the visibility of its parent part during rendering.",
    "figura.docs.model_part.set_visible": "Sets this part to be visible or invisible. The default value is nil, meaning the part copies its visibility from its parent part.",
    "figura.docs.model_part.get_primary_render_type": "Gets the current primary render type of this model part. Nil by default, meaning the part copies the primary render type of its parent.",
    "figura.docs.model_part.get_secondary_render_type": "Gets the current secondary render type of this model part. Nil by default, meaning the part copies the secondary render type of its parent.",
    "figura.docs.model_part.set_primary_render_type": "Sets the current primary render type of this model part. Nil by default, meaning the part copies the primary render type of its parent during rendering. Check the docs list command for all render types.",
    "figura.docs.model_part.set_secondary_render_type": "Sets the current secondary render type of this model part. Nil by default, meaning the part copies the secondary render type of its parent during rendering. Check the docs list command for all render types.",
    "figura.docs.model_part.set_primary_texture": "Sets the primary texture override of this part. Check the TextureType types in the list docs. If using \"resource\", the second parameter should indicate the path to the Minecraft texture you want to use.",
    "figura.docs.model_part.set_secondary_texture": "Sets the secondary texture override of this part. Check the TextureType types in the list docs. If using \"resource\", the second parameter should indicate the path to the Minecraft texture you want to use.",
    "figura.docs.model_part.part_to_world_matrix": "Gets a matrix which transforms a point from this part's position to a world location. Recommended to use this in POST_RENDER, as by then the matrix is updated. In RENDER it will be 1 frame behind the part's visual position for that frame. Also, if the model is not rendered in-world, the part's matrix will not be updated. Paperdoll rendering and other UI rendering will not affect this matrix.",
    "figura.docs.model_part.get_texture_size": "Gets the width, height of this part's texture in pixels. If this part has multiple different-sized textures on it, it throws an error instead.",
    "figura.docs.model_part.set_uv": "Sets the UV of this part. This function is normalized, meaning it works with values 0 to 1. If you say setUV(0.5, 0.25), for example, it will scroll by half of your texture width to the right, and one fourth of the texture width downwards.",
    "figura.docs.model_part.set_uv_pixels": "Sets the UV of this part in pixels. Automatically divides by the results of getTextureSize(), so you can just input the number of pixels you want the UV to scroll by. Errors if the part has multiple different-sized textures.",
    "figura.docs.model_part.set_uv_matrix": "Sets the UV matrix of this part. This matrix is applied to all UV points during the transform, with the UVs treated as homogeneous vectors. setUV() and setUVPixels() are actually just simpler ways of setting this matrix.",
    "figura.docs.model_part.set_color": "Sets the color multiplier for this part. Values are RGB from 0 to 1. Default values are 1, indicating white/no color change.",
    "figura.docs.model_part.get_color": "Gets the color multiplier of this part. Values are RGB from 0 to 1. Default values are 1, indicating white/no color change.",
    "figura.docs.model_part.set_opacity": "Sets the opacity multiplier of this part. Note that opacity settings will only take effect if the part has a suitable Render Type for them, mainly TRANSLUCENT. Check out modelPart.setPrimaryRenderType() for how to do this.",
    "figura.docs.model_part.get_opacity": "Gets the opacity multiplier of this part. Note that opacity settings will only take effect if the part has a suitable Render Type for them, mainly TRANSLUCENT. Check out modelPart.setPrimaryRenderType() for how to do this.",
    "figura.docs.model_part.set_light": "Sets the light level to be used when rendering this part. Values you give are 0 to 15, indicating the block light and sky light levels you want to use. Passing nil will reset the lighting override for this part.",
    "figura.docs.model_part.get_light": "Gets the light level you set earlier to this part. Does not interact with Minecraft's lighting system, only retrieving values you set earlier with setLight().",
    "figura.docs.model_part.set_parent_type": "Sets the parent type of the part. See the ParentType parts in the list docs for legal types.",
    "figura.docs.model_part.get_parent_type": "Returns the current parent type of the part.",
    "figura.docs.model_part.get_type": "Returns whether this part is a \"GROUP\", a \"CUBE\", or a \"MESH\".",
    "figura.docs.model_part.get_task": "Gets the Render Task with the given name from this part.",
    "figura.docs.model_part.remove_task": "Removes the Task with the given name from this part.",
    "figura.docs.nameplate": "A global API which is used for customizing your player's nameplate in chat, above your head, and in the tab list.",
    "figura.docs.nameplate.chat": "A customization for your nameplate in the chat.",
    "figura.docs.nameplate.entity": "A customization for your nameplate above your head.",
    "figura.docs.nameplate.list": "A customization for your nameplate in the tab list.",
    "figura.docs.nameplate.all": "A group that manage all your nameplate customizations at once.",
    "figura.docs.nameplate_customization": "A customization that can be applied to a nameplate.",
    "figura.docs.nameplate_customization.get_text": "The text to use in this nameplate.",
    "figura.docs.nameplate_customization.set_text": "The text to use in this nameplate.",
    "figura.docs.nameplate_entity": "A nameplate customization that is specialized for entities.",
    "figura.docs.nameplate_entity.get_pos": "Gets the position offset of the nameplate, in world coordinates.",
    "figura.docs.nameplate_entity.set_pos": "Sets the position offset of the nameplate, in world coordinates.",
    "figura.docs.nameplate_entity.get_scale": "Gets scale factor of the nameplate.",
    "figura.docs.nameplate_entity.set_scale": "Sets the scale factor of the nameplate.",
    "figura.docs.nameplate_entity.set_background_color": "Sets the color of the nameplate background. If the alpha value is not given, it will uses the vanilla value (from the accessibility settings) for it.",
    "figura.docs.nameplate_group": "A customization that holds another nameplate customizations.",
    "figura.docs.nameplate_group.set_text": "Sets the text for all its children customizations.",
    "figura.docs.particles": "A global API which is used for dealing with Minecraft's particles. Can currently only be used to summon a particle. Accessed using the name \"particle\".",
    "figura.docs.pings": "A global API dedicated to register and call pings.",
    "figura.docs.ping_function": "A custom function wrapped with networking data.",
    "figura.docs.render_task": "Represents a rendering task for Figura to complete each frame. An abstract superclass of ItemTask, BlockTask, and TextTask.",
    "figura.docs.render_task.get_pos": "Gets this task position.",
    "figura.docs.render_task.get_rot": "Gets this task rotation.",
    "figura.docs.render_task.get_scale": "Gets this task scale.",
    "figura.docs.item_task": "A task for rendering an Item.",
    "figura.docs.block_task": "A task for rendering a Block.",
    "figura.docs.text_task": "A task for rendering some Text.",
    "figura.docs.text_task.has_shadow": "Checks if this task text has shadow.",
    "figura.docs.text_task.has_outline": "Checks if this task text has outline.",
    "figura.docs.text_task.get_outline_color": "Gets this tasks text outline color.",
    "figura.docs.renderer": "A global API providing functions that change the way Minecraft renders your player.",
    "figura.docs.renderer.render_fire": "Whether or not you should visually have the fire effect while on fire. True by default.",
    "figura.docs.renderer.render_vehicle": "Whether or not your vehicle (boat, minecart, horse, whatever) will be rendered. True by default.",
    "figura.docs.renderer.render_crosshair": "Toggles whether or not if your crosshair should render. True by default.",
    "figura.docs.renderer.force_paperdoll": "Toggles if the paperdoll should render regardless of the player doing an action. If the paperdoll is disabled, or set to always render, nothing will change. False by default.",
    "figura.docs.renderer.set_shadow_radius": "Sets the radius of your shadow. The default value is nil, which means to use the vanilla default of 0.5 for players. The maximum value is 12.",
    "figura.docs.renderer.get_shadow_radius": "Gets the radius of your shadow. The default value is nil, which means to use the vanilla default of 0.5 for players.",
    "figura.docs.renderer.is_first_person": "Checks if your camera is in the first person view.",
    "figura.docs.renderer.is_camera_backwards": "Checks if your camera is in the backwards third person view.",
    "figura.docs.renderer.get_camera_pos": "Gets the position offset for the camera.",
    "figura.docs.renderer.set_camera_pos": "Sets the position offset for the camera. Nil values for position are assumed to be 0.",
    "figura.docs.renderer.get_camera_pivot": "Gets the absolute pivot for the camera.",
    "figura.docs.renderer.set_camera_pivot": "Sets the absolute pivot for the camera. The pivot will also move the camera. Its values are relative to the World. Nil values for pivot are assumed to be 0. For relative rotation values, check out the \"offset\" pivot function.",
    "figura.docs.renderer.get_camera_offset_pivot": "Gets the offset pivot for the camera.",
    "figura.docs.renderer.get_camera_rot": "Gets the absolute rotation of the camera.",
    "figura.docs.renderer.set_camera_rot": "Sets the absolute rotation of the camera. The position is not taken into account for roll. Nil values for rotation are assumed to be 0. For relative rotation values, check out the \"offset\" rot function.",
    "figura.docs.renderer.get_camera_offset_rot": "Gets the offset rotation for the camera.",
    "figura.docs.renderer.set_post_effect": "Sets the current rendering effect. Same as the discontinued Super Secret Settings.",
    "figura.docs.sounds": "A global API which is used to play Minecraft sounds. Accessed using the name \"sounds\".",
    "figura.docs.sounds.play_sound": "Plays the specified sound at the specified position with the given volume and pitch multipliers. The sound id is either an identifier or the custom sound name. Volume in Minecraft refers to how far away people can hear the sound from, not the actual loudness of it. If you don't give values for volume and pitch, the default values are 1.",
    "figura.docs.sounds.stop_sound": "Stops the playing sounds from this avatar. If an id is specified, it only stops the sounds from that id.",
    "figura.docs.sound": "Represents a sound that can be played. Obtained by indexing the SoundAPI. Exists as an object-oriented alternative to sounds:playSound().",
    "figura.docs.sound.play": "Plays this sound with the given parameters. Volume in Minecraft refers to how far away people can hear from, not the actual loudness. The defaults for volume and pitch are 1.",
    "figura.docs.vanilla_model": "A global API that provides functions to interact with the vanilla player model and its parts. Accessed using the name \"vanilla_model\".",
    "figura.docs.vanilla_model.head": "The head of the player, not including the hat.",
    "figura.docs.vanilla_model.body": "The body of the player, not including the outer layer.",
    "figura.docs.vanilla_model.left_arm": "The left arm of the player, not including the outer layer.",
    "figura.docs.vanilla_model.right_arm": "The right arm of the player, not including the outer layer.",
    "figura.docs.vanilla_model.left_leg": "The left leg of the player, not including the outer layer.",
    "figura.docs.vanilla_model.right_leg": "The right leg of the player, not including the outer layer.",
    "figura.docs.vanilla_model.hat": "The outer layer of the player's head.",
    "figura.docs.vanilla_model.jacket": "The outer layer of the player's body.",
    "figura.docs.vanilla_model.left_sleeve": "The outer layer of the player's left arm.",
    "figura.docs.vanilla_model.right_sleeve": "The outer layer of the player's right arm.",
    "figura.docs.vanilla_model.left_pants": "The outer layer of the player's left leg.",
    "figura.docs.vanilla_model.right_pants": "The outer layer of the player's right leg.",
    "figura.docs.vanilla_model.cape": "Multi-part: The player's cape.",
    "figura.docs.vanilla_model.cape_model": "The vanilla cape model.",
    "figura.docs.vanilla_model.fake_cape": "A custom copy of the cape, as attempt of storing its transformations since vanilla cape math is… weird.",
    "figura.docs.vanilla_model.helmet": "Multi-part: The helmet model.",
    "figura.docs.vanilla_model.helmet_item": "The item on the armor head slot.",
    "figura.docs.vanilla_model.helmet_head": "The head of the helmet model.",
    "figura.docs.vanilla_model.helmet_hat": "The hat of the helmet model.",
    "figura.docs.vanilla_model.chestplate": "Multi-part: The chestplate model.",
    "figura.docs.vanilla_model.chestplate_body": "The body of the chestplate model.",
    "figura.docs.vanilla_model.chestplate_left_arm": "The left arm of the chestplate model.",
    "figura.docs.vanilla_model.chestplate_right_arm": "The right arm of the chestplate model.",
    "figura.docs.vanilla_model.leggings": "Multi-part: The leggings model.",
    "figura.docs.vanilla_model.leggings_body": "The body of the leggings model.",
    "figura.docs.vanilla_model.leggings_left_leg": "The left leg of the leggings model.",
    "figura.docs.vanilla_model.leggings_right_leg": "The right leg of the leggings model.",
    "figura.docs.vanilla_model.boots": "Multi-part: The boots model.",
    "figura.docs.vanilla_model.boots_left_leg": "The left boot of the boots model.",
    "figura.docs.vanilla_model.boots_right_leg": "The right boot of the boots model.",
    "figura.docs.vanilla_model.elytra": "Multi-part: The elytra model.",
    "figura.docs.vanilla_model.left_elytra": "The left wing of the elytra model.",
    "figura.docs.vanilla_model.right_elytra": "The right wing of the elytra model.",
    "figura.docs.vanilla_model.held_items": "Multi-part: Items in the player's hands.",
    "figura.docs.vanilla_model.left_item": "The item in the player's left hand.",
    "figura.docs.vanilla_model.right_item": "The item in the player's right hand.",
    "figura.docs.vanilla_model.parrots": "Multi-part: Parrots on the player's shoulders.",
    "figura.docs.vanilla_model.left_parrot": "The Parrot in the player's left shoulder.",
    "figura.docs.vanilla_model.right_parrot": "The Parrot in the player's right shoulder.",
    "figura.docs.vanilla_model.all": "Multi-part: The entirety of the vanilla model.",
    "figura.docs.vanilla_model.outer_layer": "Multi-part: The outer layer of the player.",
    "figura.docs.vanilla_model.inner_layer": "Multi-part: The main body of the player, everything except the outer layer.",
    "figura.docs.vanilla_model.armor": "Multi-part: All armor on the model.",
    "figura.docs.vanilla_model.player": "Multi-part: Both the outer and inner layers of the player's skin, as well as the cape.",
    "figura.docs.vanilla_part": "Represents a model part in a vanilla model. Can be set visible and invisible, and queried for rotation and position offsets.",
    "figura.docs.vanilla_part.set_visible": "Sets this part to be visible or invisible.",
    "figura.docs.vanilla_part.get_visible": "Gets whether you have set this part to be visible or invisible. Only responds to your own changes in script, not anything done by Minecraft.",
    "figura.docs.vectors": "A global API which provides functions dedicated to creating and otherwise manipulating vectors. Accessed using the name \"vectors\".",
    "figura.docs.vectors.vec": "Creates and returns a vector of the appropriate size to hold the arguments passed in. For example, if you call vec(3, 4, 0, 2), then the function will return a Vector4 containing those values. There is a global alias \"vec\" for this function, meaning the \"vectors.\" can be omitted.",
    "figura.docs.vectors.vec2": "Creates and returns a Vector2 with the given values. Nil values become zero.",
    "figura.docs.vectors.vec3": "Creates and returns a Vector3 with the given values. Nil values become zero.",
    "figura.docs.vectors.vec4": "Creates and returns a Vector4 with the given values. Nil values become zero.",
    "figura.docs.vectors.rgb_to_int": "Converts the given color from RGB format to integer format.",
    "figura.docs.vectors.int_to_rgb": "Converts the given color from integer format to RGB format.",
    "figura.docs.vectors.hex_to_rgb": "Parses a hex string color into a RGB format vector. The hex \"#\" is optional, and it can have any length, however only the first 6 hex digits are evaluated, short hex (length 3) is also supported. For example, \"#42\" is the same as \"420000\", and \"F0B\" is the same as \"FF00BB\"",
    "figura.docs.vectors.hsv_to_rgb": "Converts the given color from HSV format to RGB format.",
    "figura.docs.vectors.rgb_to_hsv": "Converts the given color from RGB format to HSV format.",
    "figura.docs.vectors.rgb_to_hex": "Converts the given color from RGB format to HEX format. The \"#\" is not included on the return hex.",
    "figura.docs.vectors.rotate_around_axis": "Rotates a vector relative to a rotation vector.",
    "figura.docs.vectors.to_camera_space": "Converts a position in the world into a position relative to the viewer's camera.",
    "figura.docs.vectors.world_to_screen_space": "Converts a position in the world into a position relative to the viewer's screen.",
    "figura.docs.vector2": "A vector that holds 2 numbers. Can be created using functions in the \"vectors\" api.",
    "figura.docs.vector3": "A vector that holds 3 numbers. Can be created using functions in the \"vectors\" api.",
    "figura.docs.vector4": "A vector that holds 4 numbers. Can be created using functions in the \"vectors\" api.",
    "figura.docs.vector_n.x": "The first coordinate of this vector. Can also be gotten with the indices \"r\" and [1].",
    "figura.docs.vector_n.y": "The second coordinate of this vector. Can also be gotten with the indices \"g\" and [2].",
    "figura.docs.vector_n.z": "The third coordinate of this vector. Can also be gotten with the indices \"b\" and [3].",
    "figura.docs.vector_n.w": "The fourth coordinate of this vector. Can also be gotten with the indices \"a\" and [4].",
    "figura.docs.vector_n.reset": "Resets this vector back to being all zeroes, and returns itself for chaining.",
    "figura.docs.vector_n.set": "Sets this vector to have the given values. Nil values are treated as zero. Returns self for chaining.",
    "figura.docs.vector_n.add": "Adds the given vector or values to this one, and returns self for chaining.",
    "figura.docs.vector_n.sub": "Subtracts the given vector or values from this one, and returns self for chaining.",
    "figura.docs.vector_n.offset": "Offsets this vector by the given factor, adding the factor to all components, and returns self for chaining.",
    "figura.docs.vector_n.mul": "Multiplies the given vector or values into this one, and returns self for chaining.",
    "figura.docs.vector_n.div": "Divides this vector by the given vector or values, and returns self for chaining.",
    "figura.docs.vector_n.reduce": "Reduces this vector modulo the given vector or values, and returns self for chaining.",
    "figura.docs.vector_n.scale": "Scales this vector by the given factor, and returns self for chaining.",
    "figura.docs.vector_n.transform": "Transforms this vector by the given matrix, and returns self for chaining.",
    "figura.docs.vector_n.length_squared": "Returns the length of this vector squared. Suitable when you only care about relative lengths, because it avoids a square root.",
    "figura.docs.vector_n.copy": "Creates and returns a copy of this vector.",
    "figura.docs.vector_n.dot": "Returns the dot product of this vector with the other.",
    "figura.docs.vector_n.normalize": "Modifies this vector so that its length is 1, unless its length was originally 0. Returns self for chaining.",
    "figura.docs.vector_n.normalized": "Returns a copy of this vector with length 1, unless its length was originally 0.",
    "figura.docs.vector_n.clamp_length": "Modifies this vector so that its length is between minLength and maxLength. If the vector has length zero, it is unmodified. Returns self for chaining.",
    "figura.docs.vector_n.clamped": "Returns a modified copy of this vector, with its length clamped from minLength to maxLength. If the vector has length zero, then the copy does too.",
    "figura.docs.vector_n.length": "Returns the length of this vector.",
    "figura.docs.vector_n.to_rad": "Returns a copy of this vector, in radians.",
    "figura.docs.vector_n.to_deg": "Returns a copy of this vector, in degrees.",
    "figura.docs.vector_n.floor": "Returns a copy of this vector with its values rounded down.",
    "figura.docs.vector_n.ceil": "Returns a copy of this vector with its values rounded up.",
    "figura.docs.vector_n.apply_func": "Calls the given function on each element of this vector, and sets the values of the vector to the returns. Returns self for chaining.",
    "figura.docs.vector3.cross": "Sets this vector to the cross product of itself and the other vector. Returns self for chaining.",
    "figura.docs.vector3.crossed": "Returns a new vector which is the cross product of this and the other one.",
    "figura.docs.world": "A global API dedicated to reading information from the Minecraft world. Accessed using the name \"world\".",
    "figura.docs.world.get_biome": "Gets the Biome located at the given position.",
    "figura.docs.world.get_redstone_power": "Gets the redstone power level of the block at the given position.",
    "figura.docs.world.get_strong_redstone_power": "Gets the direct redstone power level of the block at the given position.",
    "figura.docs.world.get_time": "Gets the current game time of the world. If delta is passed in, then it adds delta to the time. The default value of delta is zero.",
    "figura.docs.world.get_time_of_day": "Gets the current day time of the world. If delta is passed in, then it adds delta to the time. The default value of delta is zero.",
    "figura.docs.world.get_moon_phase": "Gets the current moon phase of the world, stored as an integer.",
    "figura.docs.world.get_rain_gradient": "Gets the current rain gradient in the world, interpolated from the previous tick to the current one. The default value of delta is 1, which is the current tick.",
    "figura.docs.world.is_thundering": "Gets whether or not there is currently thunder/lightning happening in the world.",
    "figura.docs.world.get_light_level": "Gets the overall light level of the block at the given position.",
    "figura.docs.world.get_sky_light_level": "Gets the sky light level of the block at the given position.",
    "figura.docs.world.get_block_light_level": "Gets the block light level of the block at the given position.",
    "figura.docs.world.is_open_sky": "Gets whether or not the sky is open at the given position.",
    "figura.docs.world.get_entity": "Returns an EntityAPI object from this UUID's entity, or nil if no entity was found.",
    "figura.docs.world.get_players": "Returns a table containing instances of Player for all players in the world. The players are indexed by their names.",
    "figura.docs.world.new_block": "Parses and create a new BlockState from the given string. A world position can be optionally given for the blockstate functions that relies on its position.",
    "figura.docs.world.new_item": "Parses and create a new ItemStack from the given string. A count and damage can be given, to be applied on this itemstack.",
    "figura.docs.world.exists": "Checks whether or not a world currently exists. This will almost always be true, but might be false on some occasions such as while travelling between dimensions."
}
